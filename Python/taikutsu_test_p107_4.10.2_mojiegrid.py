grid = [['.','.','.','.','.','.'],
        ['.','0','0','.','.','.'],
        ['0','0','0','0','.','.'],
        ['0','0','0','0','0','.'],
        ['.','0','0','0','0','0'],
        ['0','0','0','0','0','.'],
        ['0','0','0','0','.','.'],
        ['.','0','0','.','.','.'],
        ['.','.','.','.','.','.']]

#上記girdの要素数をカウントする。行の要素数はlenで求めて変数xに入れる。
x = len(grid)
#printでxの値を確認しておく。
#print("girdの行数xは" + str(x) +"個です")

#gridの列の要素数は、どれかの行の中身の要素数なので適当な行を指定して求めてyに入れる。1行目のx要素0で調べる。len(grid[0])
y = len(grid[0])
#printでyの値を確認しておく。
#print("girdの列数yは" + str(y) +"個です")

#リストの要素インデックスは0スタートなので、xのインデックスをmとして初期値0を代入する。yのインデックスをnとして初期値0を代入する。
m = 0
n = 0

#grid[m]][n]を表記していく。
#nは0固定でmは0から8までカウントアップしていく。mが8に到達したら,nを1+1カウントアップ固定して、mを0から8までカウントアップしていく。

while n <= y-1: #while文でnがインデックス最大値y-1に到達するまでループを実行する。

    for m in range(x): #rangeは0からx-1の値を取る。mにrange(x)を順に代入していき、都度、下記printを表示させる。
        print(grid[m][n],end="") #通常printはend指示しないと勝手に改行されるのでmがx-1に到達するまで開業させないようにend=""で指定する。
    
    print("") #上記for文のループが終了したら改行させる。printは勝手に改行されるのでprint("")で何もなしの文字列を入力するだけでよい。
    m=0 #上記for文でmがx-1までカウントアップされるので初期の0に戻す。
    n += 1 #while文の条件のnを1つカウントアップさせる。